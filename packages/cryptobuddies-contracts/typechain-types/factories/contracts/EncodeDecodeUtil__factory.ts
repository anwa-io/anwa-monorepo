/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EncodeDecodeUtil,
  EncodeDecodeUtilInterface,
} from "../../contracts/EncodeDecodeUtil";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220a6114b71b62781db3f3f6037ded08bc5e9fc4d77d1da4e32c80d203ea18ecbf764736f6c63430008090033";

type EncodeDecodeUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EncodeDecodeUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EncodeDecodeUtil__factory extends ContractFactory {
  constructor(...args: EncodeDecodeUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EncodeDecodeUtil> {
    return super.deploy(overrides || {}) as Promise<EncodeDecodeUtil>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EncodeDecodeUtil {
    return super.attach(address) as EncodeDecodeUtil;
  }
  override connect(signer: Signer): EncodeDecodeUtil__factory {
    return super.connect(signer) as EncodeDecodeUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EncodeDecodeUtilInterface {
    return new utils.Interface(_abi) as EncodeDecodeUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EncodeDecodeUtil {
    return new Contract(address, _abi, signerOrProvider) as EncodeDecodeUtil;
  }
}
