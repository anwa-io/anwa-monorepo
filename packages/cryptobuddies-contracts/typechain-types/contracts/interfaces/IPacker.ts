/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IPackerInterface extends utils.Interface {
  functions: {
    "encode(uint256,uint256[9])": FunctionFragment;
    "encodeRead(uint256,uint256[9])": FunctionFragment;
    "layersFromComposableId(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "encode" | "encodeRead" | "layersFromComposableId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "encode",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeRead",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "layersFromComposableId",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeRead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "layersFromComposableId",
    data: BytesLike
  ): Result;

  events: {
    "Compose(uint256,uint256[9],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Compose"): EventFragment;
}

export interface ComposeEventObject {
  base: BigNumber;
  layers: BigNumber[];
  newTokenId: BigNumber;
}
export type ComposeEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber],
  ComposeEventObject
>;

export type ComposeEventFilter = TypedEventFilter<ComposeEvent>;

export interface IPacker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    encode(
      tokenId: BigNumberish,
      layers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    encodeRead(
      tokenId: BigNumberish,
      layers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseId: BigNumber; compositeId: BigNumber }
    >;

    layersFromComposableId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { layers: BigNumber[] }>;
  };

  encode(
    tokenId: BigNumberish,
    layers: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  encodeRead(
    tokenId: BigNumberish,
    layers: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { baseId: BigNumber; compositeId: BigNumber }
  >;

  layersFromComposableId(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    encode(
      tokenId: BigNumberish,
      layers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    encodeRead(
      tokenId: BigNumberish,
      layers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseId: BigNumber; compositeId: BigNumber }
    >;

    layersFromComposableId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "Compose(uint256,uint256[9],uint256)"(
      base?: null,
      layers?: null,
      newTokenId?: null
    ): ComposeEventFilter;
    Compose(base?: null, layers?: null, newTokenId?: null): ComposeEventFilter;
  };

  estimateGas: {
    encode(
      tokenId: BigNumberish,
      layers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    encodeRead(
      tokenId: BigNumberish,
      layers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layersFromComposableId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encode(
      tokenId: BigNumberish,
      layers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    encodeRead(
      tokenId: BigNumberish,
      layers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layersFromComposableId(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
